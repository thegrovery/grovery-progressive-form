---
import Layout from '../../layouts/Layout.astro';
import { getNewsData, getSerpData, generateAiAnalysis, calculateSentimentScore } from '../../lib/api-services';
import { fetchMozDomainAuthority } from '../../lib/moz-api';
import { fetchSerpResults } from '../../lib/serp-api';
import BrandSentimentCard from '../../components/dashboard/BrandSentimentCard.astro';
import TrendsChart from '../../components/dashboard/TrendsChart.astro';
import MozMetricsCard from '../../components/dashboard/MozMetricsCard.astro';
import SerpResultsCard from '../../components/dashboard/SerpResultsCard.astro';
import AiAnalysisCard from '../../components/dashboard/AiAnalysisCard.astro';
import CallToAction from '../../components/dashboard/CallToAction.astro';
import GeographicalInsightsCard from '../../components/dashboard/GeographicalInsightsCard.astro';
import type { SerpData } from '../../lib/serp-api';

// Get brand name from URL params
const { brandName = '' } = Astro.params;

// Simple session check using URL parameters
const hasSubmittedForm = Astro.url.searchParams.get('formSubmitted') === 'true';

// If no form submission indicator, redirect to form
if (!hasSubmittedForm) {
  return Astro.redirect('/?error=Please+fill+out+the+form+first');
}

// Fetch data for the dashboard
let newsData = { articles: [] };
let serpData: SerpData = {};
let mozData = {};
let trendsData = { interest_over_time: { timeline_data: [], averages: [] } };
let aiAnalysis = null;

// Initialize sentiment score with a default value
let sentimentScore = 50;

try {
  // Fetch data from APIs in parallel
  const [newsResult, serpResult, mozResult] = await Promise.all([
    getNewsData(brandName || ''),
    fetchSerpResults(brandName || ''),
    fetchMozDomainAuthority(brandName || '')
  ]);
  
  newsData = newsResult;
  serpData = serpResult;
  mozData = mozResult;
  
  // Log the data structure to help debug
  console.log("SERP data structure:", {
    hasOrganicResults: !!serpData.organic_results,
    organicResultsCount: serpData.organic_results?.length || 0,
    hasKnowledgeGraph: !!serpData.knowledge_graph,
    hasRelatedQuestions: !!serpData.related_questions
  });
  
  // Calculate sentiment score using the new function
  sentimentScore = calculateSentimentScore({
    news: newsData,
    serp: serpData,
    domainAuthority: typeof mozData === 'object' && mozData !== null ? 
      (mozData as any).domainAuthority || 0 : 0
  });
  
  // Generate AI analysis with all the data
  aiAnalysis = await generateAiAnalysis({
    name: brandName,
    sentimentScore,
    domainAuthority: typeof mozData === 'object' && mozData !== null ? 
      (mozData as any).domainAuthority || 0 : 0,
    news: newsData,
    serp: serpData
  });
  
} catch (error) {
  console.error("Error fetching brand data:", error);
  // sentimentScore already has a default value, no need to set it again
}
---

<Layout title={`${brandName} Brand Analysis`}>
  <main class="min-h-screen bg-gradient-to-b from-zinc-700 to-teal-500 p-6">
    <div class="max-w-7xl mx-auto">
      <h1 class="text-3xl font-bold text-gray-50 mb-6">Brand Health Analysis: <span class="text-slate-200 font-normal">{brandName}</span></h1>
      
      <!-- First row: Sentiment Card (1/3) and Trends Chart (2/3) -->
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
        <!-- Left column: Stacked cards -->
        <div class="space-y-6">
          <!-- Brand Sentiment Card (now with summary) -->
          <BrandSentimentCard score={sentimentScore} summary={aiAnalysis?.summary || ''} />
          
          <!-- Domain Metrics Card -->
          <MozMetricsCard mozData={mozData} />

          <!-- AI Analysis Card -->
          <AiAnalysisCard analysis={{
            strengths: aiAnalysis?.strengths || [],
            weaknesses: aiAnalysis?.weaknesses || [],
            opportunities: aiAnalysis?.opportunities || [],
            threats: aiAnalysis?.threats || [],
            summary: '' // Remove summary from here
          }} />
        </div>
        
        <!-- Middle and right columns: Trends Chart and SERP Results -->
        <div class="lg:col-span-2 space-y-6">
          <!-- Trends Chart -->
          <TrendsChart trendsData={trendsData} brandName={brandName} />
          
          <!-- SERP Results Card -->
          <SerpResultsCard serpData={serpData} />
          
          <!-- Geographical Insights Card -->
          <GeographicalInsightsCard brandName={brandName} />

           <!-- Call to Action -->
           <CallToAction brandName={brandName} />
        </div>
        
      </div>
      
      
    </div>
  </main>
</Layout>

<script>
  // Remove the sessionStorage flag when dashboard is loaded
  document.addEventListener('DOMContentLoaded', () => {
    // Clear the form submission flag
    sessionStorage.removeItem('comingFromForm');
  });
</script> 