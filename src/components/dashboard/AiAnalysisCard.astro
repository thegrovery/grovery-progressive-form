---
import BlurOverlay from "../BlurOverlay.astro";
// AI Analysis Card Component
const { analysis = {} } = Astro.props;

const strengths = analysis.strengths || [];
const weaknesses = analysis.weaknesses || [];
const opportunities = analysis.opportunities || [];
const threats = analysis.threats || [];
const summary = analysis.summary || '';

const hasError = strengths.length === 1 && strengths[0].includes('API error');

// Helper function to clean up markdown bullet points and filter empty items
function cleanMarkdown(text: string) {
  if (!text) return '';
  
  // Remove leading asterisks, dots, or dashes that might be part of markdown
  let cleaned = text.replace(/^\s*[\*\-\.]\s*/, '').trim();
  
  // Convert **text** to <strong> tags for bold formatting
  cleaned = cleaned.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
  
  // Remove any remaining single asterisks
  cleaned = cleaned.replace(/\*/g, '');
  
  // Clean up any double spaces that might have been created
  cleaned = cleaned.replace(/\s+/g, ' ').trim();
  
  return cleaned;
}

// Filter out empty items and clean markdown
function processItems(items: any) {
  return items
    .map((item: any) => cleanMarkdown(item))
    .filter((item: any) => item && item.length > 1); // Filter out empty or single-character items
}

// Process all sections
const cleanStrengths = processItems(strengths);
const cleanWeaknesses = processItems(weaknesses);
const cleanOpportunities = processItems(opportunities);
const cleanThreats = processItems(threats);
---

<div class="bg-white p-6 rounded-xl ring-1 ring-gray-200 relative">
  <h2 class="text-xl font-semibold mb-4">AI Analysis</h2>
  
  {!hasError ? (
    <div class="space-y-4">
      <!-- Strengths -->
      <div>
        <h3 class="text-green-600 font-medium mb-2">Strengths</h3>
        <ul class="list-disc pl-5 space-y-1">
          {cleanStrengths.map((strength: any) => {
            const parts = strength.split(/:\s*/);
            return (
              <li class="text-sm">
                {parts.length > 1 ? (
                  <>
                    <span set:html={parts[0]} class="font-semibold" />: {parts.slice(1).join(': ')}
                  </>
                ) : (
                  <span set:html={strength} />
                )}
              </li>
            );
          })}
        </ul>
      </div>
      
      <!-- Weaknesses -->
      <div>
        <h3 class="text-red-600 font-medium mb-2">Weaknesses</h3>
        <ul class="list-disc pl-5 space-y-1">
          {cleanWeaknesses.map((weakness: any) => {
            const parts = weakness.split(/:\s*/);
            return (
              <li class="text-sm">
                {parts.length > 1 ? (
                  <>
                    <span set:html={parts[0]} class="font-semibold" />: {parts.slice(1).join(': ')}
                  </>
                ) : (
                  <span set:html={weakness} />
                )}
              </li>
            );
          })}
        </ul>
      </div>
      
      <!-- Opportunities -->
      <div>
        <h3 class="text-blue-600 font-medium mb-2">Opportunities</h3>
        <ul class="list-disc pl-5 space-y-1">
          {cleanOpportunities.map((opportunity: any) => {
            const parts = opportunity.split(/:\s*/);
            return (
              <li class="text-sm">
                {parts.length > 1 ? (
                  <>
                    <span set:html={parts[0]} class="font-semibold" />: {parts.slice(1).join(': ')}
                  </>
                ) : (
                  <span set:html={opportunity} />
                )}
              </li>
            );
          })}
        </ul>
      </div>
      
      <!-- Threats -->
      <div>
        <h3 class="text-orange-600 font-medium mb-2">Threats</h3>
        <ul class="list-disc pl-5 space-y-1">
          {cleanThreats.map((threat: any) => {
            const parts = threat.split(/:\s*/);
            return (
              <li class="text-sm">
                {parts.length > 1 ? (
                  <>
                    <span set:html={parts[0]} class="font-semibold" />: {parts.slice(1).join(': ')}
                  </>
                ) : (
                  <span set:html={threat} />
                )}
              </li>
            );
          })}
        </ul>
      </div>


      
    </div>
  ) : (
    <div class="bg-red-50 p-4 rounded-lg">
      <h3 class="text-red-800 font-medium mb-2">Analysis Unavailable</h3>
      <p class="text-sm text-red-700">We encountered an error analyzing this brand. Please try again later.</p>
    </div>
  )}

  <!-- Blur Overlay with CTA -->
  <BlurOverlay 
    ctaText="Want to see the complete AI analysis?" 
    buttonText="Contact us for a Greenhouse&trade; Review"
    buttonUrl="https://thegrovery.com/contact"
  />
</div> 