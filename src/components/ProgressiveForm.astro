---
import ProgressBar from './ProgressBar.astro';
---

<div class="w-full">
  <form id="progressiveForm" class="space-y-6">
    <ProgressBar currentStep={1} totalSteps={4} />
    
    <!-- Step containers -->
    <div id="step1" class="space-y-4">
      <h2 class="text-xl font-semibold text-gray-700">Brand Information</h2>
      <div>
        <label for="brandName" class="block text-sm font-medium text-gray-700 mb-1">Brand Name</label>
        <input
          type="text"
          id="brandName"
          name="brandName"
          required
          class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
      </div>
      <div class="pt-4">
        <button
          type="button"
          id="nextStep1"
          class="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 transition duration-200"
        >
          Next
        </button>
      </div>
    </div>

    <div id="step2" class="space-y-4 hidden">
      <h2 class="text-xl font-semibold text-gray-700">Personal Information</h2>
      <div>
        <label for="yourName" class="block text-sm font-medium text-gray-700 mb-1">Your Name</label>
        <input
          type="text"
          id="yourName"
          name="yourName"
          required
          class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
      </div>
      <div class="flex space-x-4 pt-4">
        <button
          type="button"
          id="prevStep2"
          class="w-1/2 bg-gray-200 text-gray-800 py-2 px-4 rounded-md hover:bg-gray-300 transition duration-200"
        >
          Back
        </button>
        <button
          type="button"
          id="nextStep2"
          class="w-1/2 bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 transition duration-200"
        >
          Next
        </button>
      </div>
    </div>

    <div id="step3" class="space-y-4 hidden">
      <h2 class="text-xl font-semibold text-gray-700">Contact Information</h2>
      <div>
        <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Email Address</label>
        <input
          type="email"
          id="email"
          name="email"
          required
          class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
      </div>
      <div>
        <label for="company" class="block text-sm font-medium text-gray-700 mb-1">Your Company Name</label>
        <input
          type="text"
          id="company"
          name="company"
          required
          class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
      </div>
      <div class="flex space-x-4 pt-4">
        <button
          type="button"
          id="prevStep3"
          class="w-1/2 bg-gray-200 text-gray-800 py-2 px-4 rounded-md hover:bg-gray-300 transition duration-200"
        >
          Back
        </button>
        <button
          type="button"
          id="nextStep3"
          class="w-1/2 bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 transition duration-200"
        >
          Next
        </button>
      </div>
    </div>

    <div id="step4" class="space-y-4 hidden">
      <h2 class="text-xl font-semibold text-gray-700">Final Information</h2>
      <div>
        <label for="title" class="block text-sm font-medium text-gray-700 mb-1">Your Title</label>
        <input
          type="text"
          id="title"
          name="title"
          required
          class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
      </div>
      <div class="flex space-x-4 pt-4">
        <button
          type="button"
          id="prevStep4"
          class="w-1/2 bg-gray-200 text-gray-800 py-2 px-4 rounded-md hover:bg-gray-300 transition duration-200"
        >
          Back
        </button>
        <button
          type="submit"
          id="submitForm"
          class="w-1/2 bg-green-600 text-white py-2 px-4 rounded-md hover:bg-green-700 transition duration-200"
        >
          Submit
        </button>
      </div>
    </div>
    
    <div id="success" class="hidden text-center py-8">
      <svg class="w-16 h-16 text-green-500 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
      </svg>
      <h2 class="text-2xl font-bold text-gray-800 mb-2">Thank You!</h2>
      <p id="successMessage" class="text-gray-600">Your information has been submitted successfully.</p>
    </div>
  </form>
</div>

<script>
  // Form navigation logic
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('progressiveForm');
    const steps = [
      document.getElementById('step1'),
      document.getElementById('step2'),
      document.getElementById('step3'),
      document.getElementById('step4'),
      document.getElementById('success')
    ];
    const progressBar = document.querySelector('progress-bar');
    let currentStep = 1;

    // Next buttons
    document.getElementById('nextStep1')?.addEventListener('click', () => {
      if (validateStep(1)) {
        showStep(2);
      }
    });

    document.getElementById('nextStep2')?.addEventListener('click', () => {
      if (validateStep(2)) {
        showStep(3);
      }
    });

    document.getElementById('nextStep3')?.addEventListener('click', () => {
      if (validateStep(3)) {
        showStep(4);
      }
    });

    // Previous buttons
    document.getElementById('prevStep2')?.addEventListener('click', () => {
      showStep(1);
    });

    document.getElementById('prevStep3')?.addEventListener('click', () => {
      showStep(2);
    });

    document.getElementById('prevStep4')?.addEventListener('click', () => {
      showStep(3);
    });

    // Form submission
    form?.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      if (validateStep(4)) {
        try {
          const formData = new FormData(form);
          const data = {
            brandName: formData.get('brandName'),
            name: formData.get('yourName'),
            email: formData.get('email'),
            company: formData.get('company'),
            title: formData.get('title')
          };
          
          // Submit to HubSpot endpoint
          const response = await fetch('/api/hubspot', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
          });
          
          if (response.ok) {
            const result = await response.json();
            console.log('Form submission result:', result);
            
            // Update the success message to show what happened
            const successMessage = document.querySelector('#successMessage');
            if (successMessage) {
              successMessage.textContent = result.message || 'Form submitted successfully!';
            }
            
            showStep(5); // Show success message
          } else {
            alert('There was an error submitting your form. Please try again.');
          }
        } catch (error) {
          console.error('Error submitting form:', error);
          alert('There was an error submitting your form. Please try again.');
        }
      }
    });

    function showStep(step) {
      // First hide all steps immediately
      steps.forEach((stepEl) => {
        stepEl?.classList.add('hidden');
        stepEl?.classList.remove('active');
      });
      
      // Then show only the target step
      const targetStep = steps[step - 1];
      if (targetStep) {
        targetStep.classList.remove('hidden');
        // Trigger the animation after a very slight delay
        setTimeout(() => {
          targetStep.classList.add('active');
          
          // Auto-focus the first input field in this step
          const firstInput = targetStep.querySelector('input, select, textarea');
          if (firstInput) {
            firstInput.focus();
          }
        }, 10);
      }
      
      if (step <= 4) {
        currentStep = step;
        updateProgressBar();
      }
    }

    function validateStep(step) {
      let valid = true;
      
      // Remove any existing error messages
      document.querySelectorAll('.error-message').forEach(el => el.remove());
      
      // Implement validation for each step
      if (step === 1) {
        const brandName = document.getElementById('brandName') as HTMLInputElement;
        if (!brandName?.value.trim()) {
          displayError(brandName, 'Please enter your brand name');
          valid = false;
        }
      } else if (step === 2) {
        const yourName = document.getElementById('yourName') as HTMLInputElement;
        if (!yourName?.value.trim()) {
          displayError(yourName, 'Please enter your name');
          valid = false;
        }
      } else if (step === 3) {
        const email = document.getElementById('email') as HTMLInputElement;
        const company = document.getElementById('company') as HTMLInputElement;
        
        if (!email?.value.trim() || !isValidEmail(email.value)) {
          displayError(email, 'Please enter a valid email address');
          valid = false;
        } else if (!company?.value.trim()) {
          displayError(company, 'Please enter your company name');
          valid = false;
        }
      } else if (step === 4) {
        const title = document.getElementById('title') as HTMLInputElement;
        if (!title?.value.trim()) {
          displayError(title, 'Please enter your title');
          valid = false;
        }
      }
      
      return valid;
    }
    
    function isValidEmail(email) {
      const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return re.test(email);
    }
    
    function displayError(inputElement, message) {
      // Remove any existing error for this input
      const parent = inputElement.parentElement;
      parent.querySelectorAll('.error-message').forEach(el => el.remove());
      
      // Add new error message
      const errorDiv = document.createElement('div');
      errorDiv.className = 'error-message text-red-500 text-sm mt-1';
      errorDiv.innerText = message;
      parent.appendChild(errorDiv);
      
      // Highlight the input
      inputElement.classList.add('border-red-500', 'focus:ring-red-500');
      
      // Remove highlighting when user starts typing
      inputElement.addEventListener('input', function() {
        this.classList.remove('border-red-500', 'focus:ring-red-500');
        parent.querySelectorAll('.error-message').forEach(el => el.remove());
      }, { once: true });
    }
    
    function updateProgressBar() {
      const progressElement = document.querySelector('progress-bar');
      if (progressElement) {
        progressElement.setAttribute('data-current-step', currentStep.toString());
      }
    }

    // Add this function to handle Enter key press
    function setupEnterKeyNavigation() {
      const inputs = document.querySelectorAll('input');
      
      inputs.forEach(input => {
        input.addEventListener('keydown', (e) => {
          if (e.key === 'Enter') {
            e.preventDefault();
            
            // Handle based on which step we're on
            if (currentStep < 4) {
              if (validateStep(currentStep)) {
                showStep(currentStep + 1);
              }
            } else if (currentStep === 4) {
              // For the last step, trigger form submission
              const submitBtn = document.querySelector('button[type="submit"]');
              submitBtn?.click();
            }
          }
        });
      });
    }

    // Add this to the end of your initialization code
    setupEnterKeyNavigation();
  });
</script>

<style is:global>
  .form-step {
    opacity: 0;
    transform: translateY(10px);
    transition: opacity 0.4s ease, transform 0.4s ease;
    position: relative;
  }
  
  .form-step.active {
    opacity: 1;
    transform: translateY(0);
  }
  
  /* Ensure steps don't overlap during transition */
  .form-step.hidden {
    display: none;
    position: absolute;
    pointer-events: none;
  }
</style>